import{bf as y,r as u,z as x}from"./index-C8cpulqW.js";import{supabase as r}from"./supabase-BQifrLNN.js";import{u as A}from"./auth-store-DcQcOhW1.js";const U=y("notifications",()=>{const i=u([]),c=u(!1),n=u(0),o=u(null),s=A(),d=async(e=50)=>{if(s.user?.id){c.value=!0;try{const{data:t,error:a}=await r.from("notifications").select("*").eq("user_id",s.user.id).order("created_at",{ascending:!1}).limit(e);if(a)throw a;i.value=t||[],await l()}finally{c.value=!1}}},l=async()=>{if(!s.user?.id)return;const{data:e,error:t}=await r.rpc("get_unread_notifications_count");t||(n.value=e||0)},m=async e=>{const{error:t}=await r.rpc("mark_notification_read",{notification_id:e});if(t)throw t;const a=i.value.findIndex(f=>f.id===e);a!==-1&&(i.value[a].is_read=!0),n.value>0&&(n.value-=1)},p=async()=>{const{error:e}=await r.rpc("mark_all_notifications_read");if(e)throw e;i.value.forEach((t,a)=>{i.value[a].is_read=!0}),n.value=0},v=()=>{!s.user?.id||o.value||(o.value=r.channel(`notifications:${s.user.id}`).on("postgres_changes",{event:"INSERT",schema:"public",table:"notifications",filter:`user_id=eq.${s.user.id}`},e=>{const t=e.new;i.value.unshift(t),n.value+=1}).on("postgres_changes",{event:"UPDATE",schema:"public",table:"notifications",filter:`user_id=eq.${s.user.id}`},e=>{const t=e.new,a=i.value.findIndex(f=>f.id===t.id);a!==-1&&(i.value[a]=t),l()}).subscribe())},_=()=>{o.value&&(o.value.unsubscribe(),o.value=null)},h=async()=>{s.user?.id&&(await d(),v())},b=()=>{_(),i.value=[],n.value=0},w=()=>i.value.filter(e=>!e.is_read),g=()=>i.value.filter(e=>!!e.is_read),N=x(()=>n.value>0);return{notifications:i,isLoading:c,unreadCount:n,getUnreadNotifications:w,getReadNotifications:g,hasUnread:N,initialize:h,cleanup:b,fetchNotifications:d,updateUnreadCount:l,markAsRead:m,markAllAsRead:p,subscribeToNotifications:v,unsubscribeFromNotifications:_}});export{U as u};
