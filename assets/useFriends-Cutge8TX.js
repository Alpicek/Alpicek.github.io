import{supabase as a}from"./supabase-C7Q3J7Aw.js";import{a as v}from"./auth-store-CLpI6O-q.js";import{C as m,r as _}from"./index-BR5I7U9B.js";const w=_([]),y=_([]),h=_(0);let l=null;const G=()=>{const{shouldShowLoading:S,markDataLoaded:q}=v(),F=m(()=>h.value>0),d=async(t,e=!0,r="friends")=>{const i=e&&S(r);i&&h.value++;try{const c=await t();return e&&q(r),c}catch(c){throw console.error(`Error in withLoading for ${r}:`,c),e&&q(r),c}finally{i&&(h.value=Math.max(0,h.value-1))}},L=m(()=>y.value),R=m(()=>w.value),D=async(t,e)=>d(async()=>{try{const{data:r,error:i}=await a.from("friendships").insert([{user_id:e,friend_id:t,status:"pending"}]).select().single();if(i)throw i;return{data:r,error:null}}catch(r){return{data:null,error:r instanceof Error?r:new Error(String(r))}}},!0,"friends"),C=async(t,e)=>d(async()=>{try{const{data:r,error:i}=await a.from("friendships").update({status:"accepted"}).eq("id",t).select().single();if(i)throw i;return e&&await g(e,!0),{data:r,error:null}}catch(r){return{data:null,error:r instanceof Error?r:new Error(String(r))}}},!0,"friends"),$=async t=>d(async()=>{try{const{data:e,error:r}=await a.from("friendships").update({status:"declined"}).eq("id",t).select().single();if(r)throw r;return{data:e,error:null}}catch(e){return{data:null,error:e instanceof Error?e:new Error(String(e))}}},!0,"friends"),g=async(t,e=!1)=>t?d(async()=>{try{const{data:r,error:i}=await a.from("friendships").select("*").or(`user_id.eq.${t},friend_id.eq.${t}`).eq("status","accepted");if(i)throw i;const c=[...new Set((r||[]).map(n=>n.user_id===t?n.friend_id:n.user_id))];if(c.length===0)return y.value=[],w.value=r||[],{data:[],error:null};const{data:u,error:o}=await a.from("profiles_public").select("*").in("id",c);if(o)throw o;const f=new Map(u.map(n=>[n.id||"",n])),p=c.map(n=>f.get(n)).filter(n=>!!n);return y.value=p,w.value=r||[],{data:p,error:null}}catch(r){return{data:null,error:r instanceof Error?r:new Error(String(r))}}},!e,"friends"):{data:[],error:null},b=async(t,e=!1)=>t?d(async()=>{try{const{data:r,error:i}=await a.from("friendships").select("*").eq("friend_id",t).eq("status","pending"),{data:c,error:u}=await a.from("friendships").select("*").eq("user_id",t).eq("status","pending");if(i)throw i;if(u)throw u;const o=[...r?.map(s=>({...s,type:"incoming"}))||[],...c?.map(s=>({...s,type:"outgoing"}))||[]],f=[...new Set(o.map(s=>s.type==="incoming"?s.user_id:s.friend_id))],{data:p,error:n}=await a.from("profiles_public").select("*").in("id",f);if(n)throw n;const E=new Map(p.map(s=>[s.id||"",s]));return{data:o.map(s=>({...s,user:s.type==="incoming"?E.get(s.user_id):void 0,friend:s.type==="outgoing"?E.get(s.friend_id):void 0})),error:null}}catch(r){return{data:null,error:r instanceof Error?r:new Error(String(r))}}},!e,"pendingRequests"):{data:[],error:null};return{friends:L,friendships:R,isLoading:F,sendFriendRequest:D,acceptFriendRequest:C,declineFriendRequest:$,fetchFriends:g,fetchPendingRequests:b,searchUsers:async t=>d(async()=>{try{const{data:e,error:r}=await a.rpc("search_users",{search_query:t,limit_count:10});if(r)throw r;return{data:e,error:null}}catch{try{const{data:e,error:r}=a.from("profiles_public").select("*").eq("is_dummy",!1).limit(10);if(r)throw r;const i=t.toLowerCase();return{data:e?.filter(u=>{const o=u;return!!(o.name&&o.name.toLowerCase().includes(i)||o.surname&&o.surname.toLowerCase().includes(i)||o.username&&o.username.toLowerCase().includes(i))})||[],error:null}}catch(e){return{data:null,error:e instanceof Error?e:new Error(String(e))}}}},!0,"friends"),removeFriend:async(t,e)=>d(async()=>{try{const{error:r}=await a.from("friendships").delete().eq("id",t);if(r)throw r;return e&&await g(e,!0),{error:null}}catch(r){return{error:r instanceof Error?r:new Error(String(r))}}},!0,"friends"),resetLoadingState:async t=>{h.value=0;const{clearDataLoaded:e}=v();e("friends"),e("pendingRequests"),t&&await g(t,!0)},subscribeToFriendships:()=>{},subscribeToPendingRequests:(t,e)=>{l&&a.removeChannel(l),l=a.channel(`pending_requests:${t}`).on("postgres_changes",{event:"*",schema:"public",table:"friendships",filter:`and(or(user_id.eq.${t},friend_id.eq.${t}),status.eq.pending)`},()=>{b(t,!0).then(r=>{r?.data&&e&&e(r.data)})}).subscribe()},unsubscribeFromFriendships:()=>{l&&(a.removeChannel(l),l=null)},fetchEligibleUsersForDummySuggestion:async(t,e)=>e?d(async()=>{try{const{data:r,error:i}=await a.from("friendships").select(`
            *,
            friend:profiles!friendships_friend_id_fkey(*),
            user:profiles!friendships_user_id_fkey(*)
          `).or(`user_id.eq.${e},friend_id.eq.${e}`).eq("status","accepted");if(i)throw i;const c=(r||[]).map(n=>n.user_id===e?n.friend:n.user).filter(n=>n&&!n.is_dummy),{data:u,error:o}=await a.from("friendships").select("friend_id").eq("user_id",t);if(o)throw o;const f=new Set(u?.map(n=>n.friend_id)||[]);return{data:c.filter(n=>!f.has(n.id)),error:null}}catch(r){return{data:null,error:r instanceof Error?r:new Error(String(r))}}},!1):{data:[],error:null}}};export{G as u};
