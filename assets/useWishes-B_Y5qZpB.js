import{supabase as f}from"./supabase-DBGUSoHq.js";import{u as P,a as Q}from"./auth-store-Bt8PQceF.js";import{r as p,m as T}from"./index---xzQOhw.js";const _=`
  *,
  created_for_user:profiles!wishes_created_for_user_id_fkey(*),
  created_by_user:profiles!wishes_created_by_user_id_fkey(*)
`,J=()=>{const l=p([]),v=p(0),{shouldShowLoading:g,markDataLoaded:W}=Q(),E=T(()=>v.value>0),d=e=>({data:e||[],error:null}),h=e=>({data:null,error:e instanceof Error?e:new Error(String(e))}),u=async(e,r=!0,t="wishes")=>{r&&g(t)&&v.value++;try{const s=await e();return r&&W(t),s}finally{r&&g(t)&&v.value--}},q=async e=>u(async()=>{try{const{data:r,error:t}=await f.from("wishes").insert([{...e,visibility:e.visibility||"friends",is_bought:!1,is_received:!1}]).select(_).single();if(t)throw t;return l.value.push(r),{data:r,error:null}}catch(r){return h(r)}}),c=async(e,r,t)=>{let s;typeof e=="string"?s={userId:e,isBackgroundRefresh:r||!1,context:t||"active",forSelf:!0}:s=e||{};const i=P(),{userId:n=i.user?.id,context:a="active",isBackgroundRefresh:F=!1,forSelf:U=!0}=s;return n?u(async()=>{try{let o=f.from("wishes").select(_).eq("created_for_user_id",n);U&&(o=o.eq("created_by_user_id",n)),a==="active"?o=o.eq("is_received",!1):a==="archived"&&(o=o.eq("is_received",!0));const $=a==="archived"?"updated_at":"created_at";o=o.order($,{ascending:!1});const{data:H,error:m}=await o;if(m)throw m;return d(H)}catch(o){return h(o)}},!F):d([])},x=(e,r=!1)=>c({...e&&{userId:e},context:"all",isBackgroundRefresh:r}),S=(e,r=!1)=>c({...e&&{userId:e},context:"archived",isBackgroundRefresh:r}),b=(e,r=!1)=>c({...e&&{userId:e},context:"active",isBackgroundRefresh:r}),k=(e,r=!1)=>c({...e&&{userId:e},context:"archived",isBackgroundRefresh:r}),R=(e,r=!1)=>c({...e&&{userId:e},context:r?"all":"active",isBackgroundRefresh:!0}),B=(e,r=!1)=>c({...e&&{userId:e},context:r?"all":"active",isBackgroundRefresh:!0,forSelf:!1}),A=e=>c({...e&&{userId:e},context:"archived",isBackgroundRefresh:!0}),C=async e=>e?u(async()=>{try{const{data:r,error:t}=await f.from("friendships").select("friend_id, user_id").or(`user_id.eq.${e},friend_id.eq.${e}`).eq("status","accepted");if(t)throw t;const s=r?.map(a=>a.user_id===e?a.friend_id:a.user_id)||[];if(s.length===0)return d([]);const{data:i,error:n}=await f.from("wishes").select(_).in("created_for_user_id",s).in("visibility",["friends","public"]).eq("is_received",!1).neq("created_for_user_id",e).order("created_at",{ascending:!1});if(n)throw n;return d(i)}catch(r){return h(r)}}):d([]),y=async(e,r)=>u(async()=>{try{const{data:t,error:s}=await f.from("wishes").update(r).eq("id",e).select(_).single();if(s)throw s;const i=l.value.findIndex(n=>n.id===e);return i!==-1&&(l.value[i]=t),{data:t,error:null}}catch(t){return h(t)}}),L=async e=>u(async()=>{try{const{error:r}=await f.from("wishes").delete().eq("id",e);if(r)throw r;return l.value=l.value.filter(t=>t.id!==e),{error:null}}catch(r){return{error:r instanceof Error?r:new Error(String(r))}}}),w=async(e,r,t,s)=>{try{const{data:i,error:n}=await f.from("wishes").select("*").eq("id",e).single();if(n||!i)return{error:new Error("Wish not found")};const a=s(i,t);return a?{error:new Error(a)}:y(e,{[r]:!i[r]})}catch(i){return{error:i instanceof Error?i:new Error(String(i))}}};return{wishes:l,isLoading:E,createWish:q,fetchWishes:c,fetchAllWishesForUser:x,fetchArchivedWishes:S,fetchActiveWishes:b,fetchReceivedWishes:k,fetchFriendsWishes:C,refreshWishes:R,refreshAllWishesForUser:B,refreshReceivedWishes:A,updateWish:y,deleteWish:L,toggleBought:(e,r)=>w(e,"is_bought",r,(t,s)=>t.created_for_user_id===s?"Cannot mark your own wish as bought":null),toggleReceived:(e,r)=>w(e,"is_received",r,(t,s)=>t.created_for_user_id!==s?"Cannot mark someone else's wish as received":null)}};export{J as u};
