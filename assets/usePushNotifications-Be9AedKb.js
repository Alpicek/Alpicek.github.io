import{u as C}from"./use-quasar-kE8-QRyI.js";import{u as U}from"./auth-store-Bt8PQceF.js";import{supabase as y}from"./supabase-DBGUSoHq.js";import{u as B}from"./vue-i18n.runtime-DIn8Ggtl.js";import{r as b,m as a}from"./index---xzQOhw.js";var K={};const E="https://pushserver-production.up.railway.app";function j(){const c=C(),{t:i}=B(),u=U(),n=b(!1),l=b("default"),r=b(null),v=b(""),d=b(!1),f=()=>(n.value="serviceWorker"in navigator&&"PushManager"in window,n.value&&(l.value=Notification.permission),n.value),_=t=>{const e="=".repeat((4-t.length%4)%4),o=(t+e).replace(/-/g,"+").replace(/_/g,"/"),p=window.atob(o),h=new Uint8Array(p.length);for(let s=0;s<p.length;++s)h[s]=p.charCodeAt(s);return h},g=async()=>{try{const t=await fetch(`${E}/vapid-public-key`);if(!t.ok)throw new Error(`Failed to get VAPID key: ${t.statusText}`);const e=await t.text();return v.value=e,e}catch(t){throw console.error("Error getting VAPID public key:",t),t}},w=async()=>{if(!f())throw new Error("Push notifications are not supported");const t=await Notification.requestPermission();return l.value=t,t},P=async()=>{if(!f())throw new Error("Push notifications are not supported");if(l.value!=="granted"&&await w()!=="granted")throw new Error("Notification permission denied");d.value=!0;try{const t=await navigator.serviceWorker.ready;let e=v.value;e||(e=await g());const o=await t.pushManager.subscribe({userVisibleOnly:!0,applicationServerKey:_(e)});return r.value=o,await N(o),c.notify({type:"positive",message:i("notifications.subscribedSuccess"),timeout:3e3}),o}catch(t){throw console.error("Error subscribing to push notifications:",t),c.notify({type:"negative",message:i("notifications.subscribeError"),timeout:5e3}),t}finally{d.value=!1}},k=async()=>{if(!r.value)throw new Error("No active subscription");d.value=!0;try{await r.value.unsubscribe(),r.value=null,await A(),c.notify({type:"positive",message:i("notifications.unsubscribedSuccess"),timeout:3e3})}catch(t){throw console.error("Error unsubscribing from push notifications:",t),c.notify({type:"negative",message:i("notifications.unsubscribeError"),timeout:5e3}),t}finally{d.value=!1}},A=async()=>{if(u.user?.id)try{const{error:t}=await y.from("push_subscriptions").delete().eq("user_id",u.user.id);if(t)throw console.error("Error removing push subscription from database:",t),t;console.log("Push subscription removed from database successfully")}catch(t){console.error("Failed to remove push subscription from database:",t)}},N=async t=>{if(!u.user?.id){console.warn("No authenticated user, skipping subscription storage");return}try{const e=t.toJSON(),{error:o}=await y.from("push_subscriptions").upsert({user_id:u.user.id,endpoint:e.endpoint,p256dh_key:e.keys?.p256dh,auth_key:e.keys?.auth,subscription_data:e,created_at:new Date().toISOString(),updated_at:new Date().toISOString()},{onConflict:"user_id"});if(o)throw console.error("Error storing push subscription:",o),o;console.log("Push subscription stored successfully")}catch(e){console.error("Failed to store push subscription:",e)}},D=async()=>{if(!r.value)throw new Error("No active subscription");const t={title:i("notifications.testTitle"),body:i("notifications.testBody"),icon:"/icons/icon-192x192.png",badge:"/icons/icon-96x96.png",tag:"test-notification",data:{type:"test",timestamp:Date.now()}};await m(r.value,t)},m=async(t,e)=>{try{const o="alpik",p="tajneheslo";console.log("Environment variables check:",{BASIC_AUTH_NAME:void 0,BASIC_AUTH_PASSWORD:void 0,authName:o,authPassword:p,fullEnv:K});const h=btoa(`${o}:${p}`),s=await fetch(`${E}/send-notification`,{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Basic ${h}`},body:JSON.stringify({subscription:t.toJSON(),notification:e})});if(!s.ok){const q=await s.text();throw new Error(`Failed to send notification: ${s.status} ${q}`)}const I=await s.json();console.log("Notification sent successfully:",I),c.notify({type:"positive",message:i("notifications.sent"),timeout:3e3})}catch(o){throw console.error("Error sending notification:",o),c.notify({type:"negative",message:i("notifications.sendError"),timeout:5e3}),o}},S=async()=>{if(!f())return console.log("Push notifications not supported"),null;console.log("Getting current subscription...",n.value);try{const e=await(await navigator.serviceWorker.ready).pushManager.getSubscription();return r.value=e,e}catch(t){return console.error("Error getting current subscription:",t),null}},T=async()=>{f(),n.value&&(await S(),await g(),await $())},$=async()=>{if(u.user?.id)try{const{data:t,error:e}=await y.from("push_subscriptions").select("*").eq("user_id",u.user.id).eq("is_active",!0).single();if(e&&e.code!=="PGRST116"){console.error("Error checking database subscription:",e);return}t&&!r.value&&console.log("Found database subscription but no browser subscription",r.value,!!r.value)}catch(t){console.error("Failed to check database subscription:",t)}},O=a(()=>!!r.value),x=a(()=>n.value&&l.value!=="denied"),F=a(()=>l.value==="default");return{isSupported:a(()=>n.value),permission:a(()=>l.value),isSubscribed:O,canSubscribe:x,needsPermission:F,isLoading:a(()=>d.value),vapidPublicKey:a(()=>v.value),initialize:T,requestPermission:w,subscribe:P,unsubscribe:k,sendTestNotification:D,sendNotification:m,getCurrentSubscription:S,checkSupport:f}}export{j as u};
