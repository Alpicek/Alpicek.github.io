import{supabase as i}from"./supabase-BFO1p7NK.js";import{a as y}from"./auth-store-BrgRVf0O.js";import{x as p,r as m}from"./index-dYzdyrNV.js";const q=m([]),b=m([]),c=m(0);let l=null,u=null;const A=()=>{const{shouldShowLoading:v,markDataLoaded:w}=y(),E=p(()=>c.value>0),o=async(n,e=!0,r="friends")=>{const t=e&&v(r);console.log(`withLoading: ${r}, shouldShow: ${t}, counter before: ${c.value}`),t&&(c.value++,console.log(`Loading counter increased to: ${c.value}`));try{const s=await n();return e&&(w(r),console.log(`Data marked as loaded for: ${r}`)),s}catch(s){throw console.error(`Error in withLoading for ${r}:`,s),e&&(w(r),console.log(`Data marked as loaded (after error) for: ${r}`)),s}finally{t&&(c.value=Math.max(0,c.value-1),console.log(`Loading counter decreased to: ${c.value}`))}},L=p(()=>b.value),S=p(()=>q.value),F=async(n,e)=>o(async()=>{try{const{data:r,error:t}=await i.from("friendships").insert([{user_id:e,friend_id:n,status:"pending"}]).select().single();if(t)throw t;return{data:r,error:null}}catch(r){return{data:null,error:r instanceof Error?r:new Error(String(r))}}},!0,"friends"),$=async(n,e)=>o(async()=>{try{const{data:r,error:t}=await i.from("friendships").update({status:"accepted"}).eq("id",n).select().single();if(t)throw t;return e&&await f(e,!0),{data:r,error:null}}catch(r){return{data:null,error:r instanceof Error?r:new Error(String(r))}}},!0,"friends"),C=async n=>o(async()=>{try{const{data:e,error:r}=await i.from("friendships").update({status:"declined"}).eq("id",n).select().single();if(r)throw r;return{data:e,error:null}}catch(e){return{data:null,error:e instanceof Error?e:new Error(String(e))}}},!0,"friends"),f=async(n,e=!1)=>n?o(async()=>{try{const{data:r,error:t}=await i.from("friendships").select(`
            *,
            friend:profiles!friendships_friend_id_fkey(*),
            user:profiles!friendships_user_id_fkey(*)
          `).or(`user_id.eq.${n},friend_id.eq.${n}`).eq("status","accepted");if(t)throw t;const s=r?.map(d=>d.user_id===n?d.friend:d.user)||[];return b.value=s,q.value=r||[],{data:s,error:null}}catch(r){return{data:null,error:r instanceof Error?r:new Error(String(r))}}},!e,"friends"):{data:[],error:null},_=async(n,e=!1)=>n?o(async()=>{try{const{data:r,error:t}=await i.from("friendships").select(`
            *,
            user:profiles!friendships_user_id_fkey(*)
          `).eq("friend_id",n).eq("status","pending"),{data:s,error:d}=await i.from("friendships").select(`
            *,
            friend:profiles!friendships_friend_id_fkey(*)
          `).eq("user_id",n).eq("status","pending");if(t)throw t;if(d)throw d;return{data:[...r?.map(h=>({...h,type:"incoming"}))||[],...s?.map(h=>({...h,type:"outgoing"}))||[]],error:null}}catch(r){return{data:null,error:r instanceof Error?r:new Error(String(r))}}},!e,"pendingRequests"):{data:[],error:null};return{friends:L,friendships:S,isLoading:E,sendFriendRequest:F,acceptFriendRequest:$,declineFriendRequest:C,fetchFriends:f,fetchPendingRequests:_,searchUsers:async n=>o(async()=>{try{const{data:e,error:r}=await i.rpc("search_users",{search_query:n,limit_count:10});if(r)throw r;return{data:e,error:null}}catch{try{const{data:e,error:r}=await i.from("profiles").select("*").eq("is_dummy",!1).limit(10);if(r)throw r;return{data:e?.filter(s=>s.email.toLowerCase().includes(n.toLowerCase())||s.name&&s.name.toLowerCase().includes(n.toLowerCase())||s.surname&&s.surname.toLowerCase().includes(n.toLowerCase())||s.username&&s.username.toLowerCase().includes(n.toLowerCase()))||[],error:null}}catch(e){return{data:null,error:e instanceof Error?e:new Error(String(e))}}}},!0,"friends"),removeFriend:async(n,e)=>o(async()=>{try{const{error:r}=await i.from("friendships").delete().eq("id",n);if(r)throw r;return e&&await f(e,!0),{error:null}}catch(r){return{error:r instanceof Error?r:new Error(String(r))}}},!0,"friends"),resetLoadingState:async n=>{c.value=0;const{clearDataLoaded:e}=y();e("friends"),e("pendingRequests"),n&&await f(n,!0)},subscribeToFriendships:n=>{l&&i.removeChannel(l),l=i.channel(`friendships:${n}`).on("postgres_changes",{event:"*",schema:"public",table:"friendships",filter:`or(user_id.eq.${n},friend_id.eq.${n})`},()=>{f(n,!0)}).subscribe()},subscribeToPendingRequests:(n,e)=>{u&&i.removeChannel(u),u=i.channel(`pending_requests:${n}`).on("postgres_changes",{event:"*",schema:"public",table:"friendships",filter:`and(or(user_id.eq.${n},friend_id.eq.${n}),status.eq.pending)`},()=>{_(n,!0).then(r=>{r?.data&&e&&e(r.data)})}).subscribe()},unsubscribeFromFriendships:()=>{l&&(i.removeChannel(l),l=null),u&&(i.removeChannel(u),u=null)},fetchEligibleUsersForDummySuggestion:async(n,e)=>e?o(async()=>{try{const{data:r,error:t}=await i.from("friendships").select(`
            *,
            friend:profiles!friendships_friend_id_fkey(*),
            user:profiles!friendships_user_id_fkey(*)
          `).or(`user_id.eq.${e},friend_id.eq.${e}`).eq("status","accepted");if(t)throw t;const s=(r||[]).map(a=>a.user_id===e?a.friend:a.user).filter(a=>a&&!a.is_dummy),{data:d,error:g}=await i.from("friendships").select("friend_id").eq("user_id",n);if(g)throw g;const h=new Set(d?.map(a=>a.friend_id)||[]);return{data:s.filter(a=>!h.has(a.id)),error:null}}catch(r){return{data:null,error:r instanceof Error?r:new Error(String(r))}}},!1):{data:[],error:null}}};export{A as u};
