import{bf as x,r as u,z as f}from"./index-CzEHk4FJ.js";import{supabase as r}from"./supabase-RdUxExGH.js";import{u as A}from"./auth-store-B9ZbRhc6.js";const U=x("notifications",()=>{const i=u([]),c=u(!1),n=u(0),o=u(null),s=A(),v=async(e=50)=>{if(s.user?.id){c.value=!0;try{const{data:t,error:a}=await r.from("notifications").select("*").eq("user_id",s.user.id).order("created_at",{ascending:!1}).limit(e);if(a)throw a;i.value=t||[],await l()}finally{c.value=!1}}},l=async()=>{if(!s.user?.id)return;const{data:e}=await r.rpc("get_unread_notifications_count");n.value=e||0},p=async e=>{const{error:t}=await r.rpc("mark_notification_read",{notification_id:e});if(t)throw t;const a=i.value.findIndex(d=>d.id===e);a!==-1&&(i.value[a]={...i.value[a],is_read:!0}),n.value>0&&(n.value-=1)},b=async()=>{const{error:e}=await r.rpc("mark_all_notifications_read");if(e)throw e;i.value=i.value.map(t=>({...t,is_read:!0})),n.value=0},_=()=>{!s.user?.id||o.value||(o.value=r.channel(`notifications:${s.user.id}`).on("postgres_changes",{event:"INSERT",schema:"public",table:"notifications",filter:`user_id=eq.${s.user.id}`},e=>{const t=e.new;i.value.unshift(t),n.value+=1}).on("postgres_changes",{event:"UPDATE",schema:"public",table:"notifications",filter:`user_id=eq.${s.user.id}`},e=>{const t=e.new,a=i.value.findIndex(d=>d.id===t.id);a!==-1&&(i.value[a]=t),l()}).subscribe())},m=()=>{o.value&&(o.value.unsubscribe(),o.value=null)},h=async()=>{s.user?.id&&(await v(),_())},w=()=>{m(),i.value=[],n.value=0},g=f(()=>i.value.filter(e=>!e.is_read)),N=f(()=>i.value.filter(e=>e.is_read)),y=f(()=>n.value>0);return{notifications:i,isLoading:c,unreadCount:n,getUnreadNotifications:g,getReadNotifications:N,hasUnread:y,initialize:h,cleanup:w,fetchNotifications:v,updateUnreadCount:l,markAsRead:p,markAllAsRead:b,subscribeToNotifications:_,unsubscribeFromNotifications:m}});export{U as u};
