import{supabase as s}from"./supabase-BIl89mDf.js";import{a as S}from"./auth-store-Dqt3Ltmy.js";import{z as w,r as q}from"./index-DY4q8G6M.js";const _=q([]),y=q([]),g=q(0);let u=null,f=null;const H=()=>{const{shouldShowLoading:F,markDataLoaded:b}=S(),L=w(()=>g.value>0),d=async(n,e=!0,r="friends")=>{const i=e&&F(r);i&&g.value++;try{const c=await n();return e&&b(r),c}catch(c){throw console.error(`Error in withLoading for ${r}:`,c),e&&b(r),c}finally{i&&(g.value=Math.max(0,g.value-1))}},R=w(()=>y.value),C=w(()=>_.value),$=async(n,e)=>d(async()=>{try{const{data:r,error:i}=await s.from("friendships").insert([{user_id:e,friend_id:n,status:"pending"}]).select().single();if(i)throw i;return{data:r,error:null}}catch(r){return{data:null,error:r instanceof Error?r:new Error(String(r))}}},!0,"friends"),D=async(n,e)=>d(async()=>{try{const{data:r,error:i}=await s.from("friendships").update({status:"accepted"}).eq("id",n).select().single();if(i)throw i;return e&&await p(e,!0),{data:r,error:null}}catch(r){return{data:null,error:r instanceof Error?r:new Error(String(r))}}},!0,"friends"),k=async n=>d(async()=>{try{const{data:e,error:r}=await s.from("friendships").update({status:"declined"}).eq("id",n).select().single();if(r)throw r;return{data:e,error:null}}catch(e){return{data:null,error:e instanceof Error?e:new Error(String(e))}}},!0,"friends"),p=async(n,e=!1)=>n?d(async()=>{try{const{data:r,error:i}=await s.from("friendships").select("*").or(`user_id.eq.${n},friend_id.eq.${n}`).eq("status","accepted");if(i)throw i;const c=[...new Set((r||[]).map(t=>t.user_id===n?t.friend_id:t.user_id))];if(c.length===0)return y.value=[],_.value=r||[],{data:[],error:null};const{data:l,error:o}=await s.from("profiles_public").select("*").in("id",c);if(o)throw o;const h=new Map(l.map(t=>[t.id||"",t])),m=c.map(t=>h.get(t)).filter(t=>!!t);return y.value=m,_.value=r||[],{data:m,error:null}}catch(r){return{data:null,error:r instanceof Error?r:new Error(String(r))}}},!e,"friends"):{data:[],error:null},E=async(n,e=!1)=>n?d(async()=>{try{const{data:r,error:i}=await s.from("friendships").select("*").eq("friend_id",n).eq("status","pending"),{data:c,error:l}=await s.from("friendships").select("*").eq("user_id",n).eq("status","pending");if(i)throw i;if(l)throw l;const o=[...r?.map(a=>({...a,type:"incoming"}))||[],...c?.map(a=>({...a,type:"outgoing"}))||[]],h=[...new Set(o.map(a=>a.type==="incoming"?a.user_id:a.friend_id))],{data:m,error:t}=await s.from("profiles_public").select("*").in("id",h);if(t)throw t;const v=new Map(m.map(a=>[a.id||"",a]));return{data:o.map(a=>({...a,user:a.type==="incoming"?v.get(a.user_id):void 0,friend:a.type==="outgoing"?v.get(a.friend_id):void 0})),error:null}}catch(r){return{data:null,error:r instanceof Error?r:new Error(String(r))}}},!e,"pendingRequests"):{data:[],error:null};return{friends:R,friendships:C,isLoading:L,sendFriendRequest:$,acceptFriendRequest:D,declineFriendRequest:k,fetchFriends:p,fetchPendingRequests:E,searchUsers:async n=>d(async()=>{try{const{data:e,error:r}=await s.rpc("search_users",{search_query:n,limit_count:10});if(r)throw r;return{data:e,error:null}}catch{try{const{data:e,error:r}=s.from("profiles_public").select("*").eq("is_dummy",!1).limit(10);if(r)throw r;const i=n.toLowerCase();return{data:e?.filter(l=>{const o=l;return!!(o.name&&o.name.toLowerCase().includes(i)||o.surname&&o.surname.toLowerCase().includes(i)||o.username&&o.username.toLowerCase().includes(i))})||[],error:null}}catch(e){return{data:null,error:e instanceof Error?e:new Error(String(e))}}}},!0,"friends"),removeFriend:async(n,e)=>d(async()=>{try{const{error:r}=await s.from("friendships").delete().eq("id",n);if(r)throw r;return e&&await p(e,!0),{error:null}}catch(r){return{error:r instanceof Error?r:new Error(String(r))}}},!0,"friends"),resetLoadingState:async n=>{g.value=0;const{clearDataLoaded:e}=S();e("friends"),e("pendingRequests"),n&&await p(n,!0)},subscribeToFriendships:n=>{u&&s.removeChannel(u),u=s.channel(`friendships:${n}`).on("postgres_changes",{event:"*",schema:"public",table:"friendships",filter:`or(user_id.eq.${n},friend_id.eq.${n})`},()=>{p(n,!0)}).subscribe()},subscribeToPendingRequests:(n,e)=>{f&&s.removeChannel(f),f=s.channel(`pending_requests:${n}`).on("postgres_changes",{event:"*",schema:"public",table:"friendships",filter:`and(or(user_id.eq.${n},friend_id.eq.${n}),status.eq.pending)`},()=>{E(n,!0).then(r=>{r?.data&&e&&e(r.data)})}).subscribe()},unsubscribeFromFriendships:()=>{u&&(s.removeChannel(u),u=null),f&&(s.removeChannel(f),f=null)},fetchEligibleUsersForDummySuggestion:async(n,e)=>e?d(async()=>{try{const{data:r,error:i}=await s.from("friendships").select(`
            *,
            friend:profiles!friendships_friend_id_fkey(*),
            user:profiles!friendships_user_id_fkey(*)
          `).or(`user_id.eq.${e},friend_id.eq.${e}`).eq("status","accepted");if(i)throw i;const c=(r||[]).map(t=>t.user_id===e?t.friend:t.user).filter(t=>t&&!t.is_dummy),{data:l,error:o}=await s.from("friendships").select("friend_id").eq("user_id",n);if(o)throw o;const h=new Set(l?.map(t=>t.friend_id)||[]);return{data:c.filter(t=>!h.has(t.id)),error:null}}catch(r){return{data:null,error:r instanceof Error?r:new Error(String(r))}}},!1):{data:[],error:null}}};export{H as u};
