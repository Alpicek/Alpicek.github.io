import{u as q}from"./use-quasar-cnwfguXq.js";import{u as x}from"./auth-store-C56jhR5j.js";import{supabase as y}from"./supabase-DdGcxtya.js";import{u as B}from"./vue-i18n.runtime-BS_NomSs.js";import{r as g,m as a}from"./index-DM363yaO.js";const w="https://pushserver-production.up.railway.app";function G(){const c=q(),{t:r}=B(),u=x(),i=g(!1),l=g("default"),s=g(null),v=g(""),d=g(!1),b=()=>(i.value="serviceWorker"in navigator&&"PushManager"in window,i.value&&(l.value=Notification.permission),i.value),k=o=>{const e="=".repeat((4-o.length%4)%4),t=(o+e).replace(/-/g,"+").replace(/_/g,"/"),f=window.atob(t),h=new Uint8Array(f.length);for(let n=0;n<f.length;++n)h[n]=f.charCodeAt(n);return h},m=async()=>{try{const o=await fetch(`${w}/vapid-public-key`);if(!o.ok)throw new Error(`Failed to get VAPID key: ${o.statusText}`);const e=await o.text();return v.value=e,e}catch(o){throw console.error("Error getting VAPID public key:",o),o}},S=async()=>{if(!b())throw new Error("Push notifications are not supported");const o=await Notification.requestPermission();return l.value=o,o},I=async()=>{if(!b())throw new Error("Push notifications are not supported");if(l.value!=="granted"&&await S()!=="granted")throw new Error("Notification permission denied");d.value=!0;try{const o=await navigator.serviceWorker.ready;console.log("=== SUBSCRIBING TO PUSH ==="),console.log("Registration scope:",o.scope),console.log("Registration active worker:",o.active?.scriptURL),console.log("Registration push manager:",!!o.pushManager);let e=v.value;e||(e=await m());const t=await o.pushManager.subscribe({userVisibleOnly:!0,applicationServerKey:k(e)});return console.log("Push subscription created with scope:",o.scope),console.log("Push subscription endpoint:",t.endpoint),console.log("=== SUBSCRIPTION COMPLETE ==="),s.value=t,await O(t),c.notify({type:"positive",message:r("notifications.subscribedSuccess"),timeout:3e3}),t}catch(o){throw console.error("Error subscribing to push notifications:",o),c.notify({type:"negative",message:r("notifications.subscribeError"),timeout:5e3}),o}finally{d.value=!1}},T=async()=>{if(!s.value)throw new Error("No active subscription");d.value=!0;try{await s.value.unsubscribe(),s.value=null,await _(),c.notify({type:"positive",message:r("notifications.unsubscribedSuccess"),timeout:3e3})}catch(o){throw console.error("Error unsubscribing from push notifications:",o),c.notify({type:"negative",message:r("notifications.unsubscribeError"),timeout:5e3}),o}finally{d.value=!1}},_=async()=>{if(u.user?.id)try{const{error:o}=await y.from("push_subscriptions").delete().eq("user_id",u.user.id);if(o)throw console.error("Error removing push subscription from database:",o),o;console.log("Push subscription removed from database successfully")}catch(o){console.error("Failed to remove push subscription from database:",o)}},O=async o=>{if(!u.user?.id){console.warn("No authenticated user, skipping subscription storage");return}try{const e=o.toJSON(),{error:t}=await y.from("push_subscriptions").upsert({user_id:u.user.id,endpoint:e.endpoint,p256dh_key:e.keys?.p256dh,auth_key:e.keys?.auth,subscription_data:e,created_at:new Date().toISOString(),updated_at:new Date().toISOString()},{onConflict:"user_id"});if(t)throw console.error("Error storing push subscription:",t),t;console.log("Push subscription stored successfully")}catch(e){console.error("Failed to store push subscription:",e)}},A=async()=>{if(!s.value)throw new Error("No active subscription");const o={title:r("notifications.testTitle"),body:r("notifications.testBody"),icon:"/icons/icon-192x192.png",badge:"/icons/icon-96x96.png",tag:"test-notification",data:{type:"test",timestamp:Date.now()}};await P(s.value,o)},P=async(o,e)=>{try{const t="alpik",h=btoa(`${t}:tajneheslo`),n={subscription:o.toJSON(),notification:e};console.log("=== SENDING PUSH NOTIFICATION ==="),console.log("Push server URL:",w),console.log("Auth name:",t),console.log("Request body:",n),console.log("Subscription details:",o.toJSON());const p=await fetch(`${w}/send-notification`,{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Basic ${h}`},body:JSON.stringify(n)});if(console.log("Server response status:",p.status),console.log("Server response headers:",p.headers),!p.ok){const N=await p.text();throw console.error("Server error response:",N),new Error(`Failed to send notification: ${p.status} ${N}`)}const $=await p.json();console.log("Notification sent successfully:",$),console.log("=== PUSH NOTIFICATION SENT ==="),c.notify({type:"positive",message:r("notifications.sent"),timeout:3e3})}catch(t){throw console.error("Error sending notification:",t),c.notify({type:"negative",message:r("notifications.sendError"),timeout:5e3}),t}},E=async()=>{if(!b())return console.log("Push notifications not supported"),null;console.log("Getting current subscription...",i.value);try{const e=await(await navigator.serviceWorker.ready).pushManager.getSubscription();return console.log("Found subscription in getCurrentSubscription:",e),s.value=e,console.log("Set subscription.value to:",s.value),console.log("isSubscribed computed now returns:",!!s.value),e}catch(o){return console.error("Error getting current subscription:",o),null}},R=async()=>{b(),i.value&&(await E(),await m(),await U())},U=async()=>{if(u.user?.id)try{const{data:o,error:e}=await y.from("push_subscriptions").select("*").eq("user_id",u.user.id).eq("is_active",!0).single();if(e&&e.code!=="PGRST116"){console.error("Error checking database subscription:",e);return}o&&!s.value&&console.log("Found database subscription but no browser subscription",s.value,!!s.value)}catch(o){console.error("Failed to check database subscription:",o)}},C=a(()=>!!s.value),D=a(()=>i.value&&l.value!=="denied"),F=a(()=>l.value==="default");return{isSupported:a(()=>i.value),permission:a(()=>l.value),isSubscribed:C,canSubscribe:D,needsPermission:F,isLoading:a(()=>d.value),vapidPublicKey:a(()=>v.value),initialize:R,requestPermission:S,subscribe:I,unsubscribe:T,sendTestNotification:A,sendNotification:P,getCurrentSubscription:E,checkSupport:b}}export{G as u};
